roa4 table r4;
roa6 table r6;
ipv6 table default6;
ipv6 table bgp_v6;
ipv6 table bgp_v6_own;
ipv4 table default4;
ipv4 table bgp_v4;  #For allowed to carry downstream
ipv4 table bgp_v4_own; #For not allowed to carry downstream

#log syslog all;
# log "/var/log/bird.log" all;

include "vars.conf";
include "prefixes/*";
include "functions/predefined.conf";
include "functions/neighbor.conf";

protocol kernel {
    kernel table 256;
    #learn;
#    persist;
        ipv6 {
                table default6;
                import all;
                export filter {
                if bgp_large_community ~ [(LOCAL_ASN, 668,*)] then reject;                  # Implement (LOCAL_ASN, 668,*)   do not send to kernel
                if bgp_large_community ~ [(LOCAL_ASN, 667,*)] then dest = RTD_UNREACHABLE;  # Implement (61302, 667, *)  send to kernel but mark unreachable
                if bgp_large_community ~ [(LOCAL_ASN,666,*)] then dest = RTD_BLACKHOLE;    # Implement (61302, 666, *)  send to kernel but mark blackhole
                    accept;
                #krt_prefsrc = 2a0f:5707:ffe3::57;
            };
        };
}

protocol kernel {
	#metric 2000;
        ipv6 {
                export filter {
                #krt_prefsrc =  2a0f:5707:ffe3::57; 
		   accept;
                };
                import all;
        };
}

protocol kernel {
        ipv4 {
                export filter {
                    accept;
                };
                import all;
        };
}

protocol kernel {               # For bgp that allow downstream
        kernel table 147;
        ipv6 {
                table bgp_v6;
                export filter {
                if bgp_large_community ~ [(LOCAL_ASN, 668,*)] then reject;                  # Implement (LOCAL_ASN, 668,*)   do not send to kernel
                if bgp_large_community ~ [(LOCAL_ASN, 667,*)] then dest = RTD_UNREACHABLE;  # Implement (61302, 667, *)  send to kernel but mark unreachable
                if bgp_large_community ~ [(LOCAL_ASN,666,*)] then dest = RTD_BLACKHOLE;    # Implement (61302, 666, *)  send to kernel but mark blackhole
                    #krt_prefsrc = 2406:840:e249::;
                    accept;
                };
                import all;
        };
}

protocol kernel {               # For bgp that allow downstream
        kernel table 147;
        ipv4 {
                table bgp_v4;
                export filter {
                if bgp_large_community ~ [(LOCAL_ASN, 668,*)] then reject;                  # Implement (LOCAL_ASN, 668,*)   do not send to kernel
                if bgp_large_community ~ [(LOCAL_ASN, 667,*)] then dest = RTD_UNREACHABLE;  # Implement (61302, 667, *)  send to kernel but mark unreachable
                if bgp_large_community ~ [(LOCAL_ASN,666,*)] then dest = RTD_BLACKHOLE;    # Implement (61302, 666, *)  send to kernel but mark blackhole
                    accept;
                };
                import all;
        };
}

protocol kernel {               # For bgp that don't allow downstream
        kernel table 247;
        ipv4 {
                table bgp_v4_own;
                export filter {
                if bgp_large_community ~ [(LOCAL_ASN, 668,*)] then reject;                  # Implement (LOCAL_ASN, 668,*)   do not send to kernel
                if bgp_large_community ~ [(LOCAL_ASN, 667,*)] then dest = RTD_UNREACHABLE;  # Implement (61302, 667, *)  send to kernel but mark unreachable
                if bgp_large_community ~ [(LOCAL_ASN,666,*)] then dest = RTD_BLACKHOLE;    # Implement (61302, 666, *)  send to kernel but mark blackhole
                    accept;
                };
                import all;
        };
}

protocol kernel {
        kernel table 256;
        ipv4 {  
                table default4;
                import all;
                export filter {
                if bgp_large_community ~ [(LOCAL_ASN, 668,*)] then reject;                  # Implement (LOCAL_ASN, 668,*)   do not send to kernel
                if bgp_large_community ~ [(LOCAL_ASN, 667,*)] then dest = RTD_UNREACHABLE;  # Implement (61302, 667, *)  send to kernel but mark unreachable
                if bgp_large_community ~ [(LOCAL_ASN,666,*)] then dest = RTD_BLACKHOLE;    # Implement (61302, 666, *)  send to kernel but mark blackhole
                    accept;
                #krt_prefsrc = 5.189.255.107;
            };
        };
}

protocol kernel {               # For bgp that don't allow downstream
        kernel table 247;
        ipv6 {
                table bgp_v6_own;
                export filter {
                if bgp_large_community ~ [(LOCAL_ASN, 668,*)] then reject;                  # Implement (LOCAL_ASN, 668,*)   do not send to kernel
                if bgp_large_community ~ [(LOCAL_ASN, 667,*)] then dest = RTD_UNREACHABLE;  # Implement (61302, 667, *)  send to kernel but mark unreachable
                if bgp_large_community ~ [(LOCAL_ASN,666,*)] then dest = RTD_BLACKHOLE;    # Implement (61302, 666, *)  send to kernel but mark blackhole
                    accept;
                #krt_prefsrc = 5.189.255.107;
            };
                import all;
        };
}

protocol device {
	#scan time 60;
}

#protocol direct {
        #interface "dummy*";
    #ipv6 { 
    #import all;
    #export all;
    #};
#}

#protocol direct {
        #interface "dummy*";
    #ipv4 {
    #import all;
    #export all;
    #};
#}

protocol direct {
    ipv4; # 启用 ipv4 channel，否则不会收集 IPv4 路由
    ipv6; # 启用 ipv6 channel，同上
}


protocol rpki {
#        debug all;

        roa4 { table r4; };
        roa6 { table r6; };

        # Please, do not use rpki-validator.realmv6.org in production
        remote "rtr.rpki.cloudflare.com" port 8282;

        retry keep 5;
        refresh keep 30;
        expire 600;
}


protocol pipe {                         # Synchronize the routing table that can carry downstream and cannot be written to the main routing table
        table bgp_v6;
        peer table default6;
        export all;
        import filter {
            if bgp_export() then accept;
            if bgp_export_downstream() then accept;
            reject; 
        } ;                    #Synchronize the prefixes that the local machine needs to announce into 2 tables for BGP
}

protocol pipe {                    
        table bgp_v6_own;
        peer table default6;
        export all;
        import filter {
            if bgp_export() then accept;
            reject; 
        } ;
}

protocol pipe {                         # Synchronize the routing table that can carry downstream and cannot be written to the main routing table
        table bgp_v4;
        peer table default4;
        export all;
        import filter {
            if bgp_export() then accept;
            if bgp_export_downstream() then accept;
            reject; 
        } ;                    #Synchronize the prefixes that the local machine needs to announce into 2 tables for BGP
}

protocol pipe {                    
        table bgp_v4_own;
        peer table default4;
        export all;
        import filter {
            if bgp_export() then accept;
            reject; 
        } ;
}


protocol pipe {                    
        table master6;
        peer table bgp_v6;
        export all;
        import none;
}

protocol pipe {                    
        table master6;
        peer table bgp_v6_own;
        export all;
        import none;
}

protocol pipe {                    
        table master4;
        peer table bgp_v4;
        export all;
        import none;
}

protocol pipe {                    
        table master4;
        peer table bgp_v4_own;
        export all;
        import none;
}

template bgp tpl_bgp {
    graceful restart on;
    local as LOCAL_ASN;
    enforce first as on;
    interpret communities on;
    allow local as 1;
    ipv6 {
        table bgp_v6;
        # preference 110;
        next hop self;
        import none;
        export none;
        import keep filtered on;
        import limit 5000 action block;
        export limit 5000 action block;

    };
}

template bgp tpl_bgp_v4 {
    graceful restart on;
    local as LOCAL_ASN;
    enforce first as on;
    interpret communities on;
    allow local as 1;
    ipv4 {
        table bgp_v4;
        # preference 110;
        next hop self;
        import none;
        export none;
        import keep filtered on;
        import limit 5000 action block;
        export limit 5000 action block;
    };
}

template bgp tpl_bgp_confederation {
    local as NODE_ID;
    path metric 1;
    confederation LOCAL_ASN;
    confederation member yes;
    allow bgp_local_pref on;
    graceful restart on;
    enable extended messages on;
   ipv6 {
       table bgp_v6;
       next hop self;
        next hop self;
        import none;
        export none;
        import keep filtered on;
    };
       ipv4 {
       table bgp_v4;
       next hop self;
        next hop self;
        import none;
        export none;
        import keep filtered on;
    };
}

template bgp tpl_bgp_confederation_own {
    local as NODE_ID;
    path metric 1;
    confederation LOCAL_ASN;
    confederation member yes;
    allow bgp_local_pref on;
    graceful restart on;
    enable extended messages on;
   ipv6 {
        table bgp_v6_own;
        next hop self;
        import none;
        export none;
        import keep filtered on;
    };
       ipv4 {
        table bgp_v4_own;
        next hop self;
        import none;
        export none;
        import keep filtered on;
    };
}

# template bgp tpl_bgp_own {
#     allow bgp_local_pref on;
#     graceful restart on;
#     local as LOCAL_ASN;
#     ipv6 {
#         table bgp_v6_own;
#         preference 110;
#         next hop self;
#         import filter{
#             if is_bogon_asn() then {
#                     print "is bogon asn", net, " for ASN ", bgp_path.last;
#                     reject;
#             }
#             if is_bogon_prefix() then {
#                     print "is bogon prefix", net, " for ASN ", bgp_path.last;
#                     reject;
#             }
#             if (roa_check(r6, net, bgp_path.last) = ROA_INVALID) then
#             {
#                     print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
#                    reject;
#             }
#             bgp_large_community.delete([(61302, 2, *)]);
#             bgp_large_community.delete([(61302, 1, *)]);
#             bgp_large_community.delete([(61302, 3, *)]);
#             bgp_large_community.add((61302, 1, 31000));
#             accept;
#         };

#         export filter{
#             if net ~ 2407:d340:7121::/48 then bgp_path.prepend(147002);
#             if net ~ 2407:d340:7121::/48 then bgp_path.prepend(146989);
#             #if my_opt_prefix() then bgp_path.prepend(LOCAL_ASN);   
#             if bgp_export() then accept;
#             #if bgp_export_downstream() then accept;
#             else reject;
#         };
#     };
# }


# template bgp tpl_bgp_v4_own {
#     allow bgp_local_pref on;
#     graceful restart on;
#     local as LOCAL_ASN;
#     ipv4 {
#         table bgp_v4_own;
#         preference 110;
#         next hop self;
#         import filter{
#             if is_bogon_asn() then {
#                     print "is bogon asn", net, " for ASN ", bgp_path.last;
#                     reject;
#             }
#             if is_bogon_prefix() then {
#                     print "is bogon prefix", net, " for ASN ", bgp_path.last;
#                     reject;
#             }
#             if (roa_check(r6, net, bgp_path.last) = ROA_INVALID) then
#             {
#                     print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
#                    reject;
#             }
#             bgp_large_community.delete([(61302, 2, *)]);
#             bgp_large_community.delete([(61302, 1, *)]);
#             bgp_large_community.delete([(61302, 3, *)]);
#             bgp_large_community.add((61302, 1, 31000));
#             accept;
#         };

#         export filter{
#             #if my_opt_prefix() then bgp_path.prepend(LOCAL_ASN);   
#             if bgp_export() then accept;
#             #if bgp_export_downstream() then accept;
#             else reject;
#         };
#     };
# }

template bgp tpl_ibgp {
    local as LOCAL_ASN;
    #long lived graceful restart;
    graceful restart;
    rr client;
    direct;
   ipv6 {
       table bgp_v6;
       next hop self;
       import filter {
	    # bgp_path.delete(142634);
            #if bgp_path ~ [= 61302 =] then bgp_path.delete(61302);
            if is_bogon_asn() then {
                print "is bogon asn", net, " for ASN ", bgp_path.last;
                reject;
        }
            if is_bogon_prefix() then {
                print "is bogon prefix", net, " for ASN ", bgp_path.last;
                reject;
            }
            # if bgp_path ~ [=  =] then {
            #     #bgp_path.prepend(LOCAL_ASN);
            #     if my_opt_prefix() then bgp_path.prepend(LOCAL_ASN); 
            # }
	    if bgp_large_community ~ [(LOCAL_ASN, 2, 100)] then preference = 115;
            accept;
        };
        export filter {
        #     if net ~ 2407:d340:7121::/48 then bgp_path.prepend(147002);
        #     if net ~ 2407:d340:7121::/48 then bgp_path.prepend(146989);
        #   if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 27000));
        #     if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 24000));
        #     if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 21000));
        #     if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 24000));
        #     if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 21000));
        #     if net ~ 2a0c:e640:1011::/48 then bgp_large_community.add((61302, 4, 27000));
        #     if net ~ 2a0c:e640:1011::/48 then bgp_large_community.add((61302, 4, 24000));
        #     if net ~ 2a0c:e640:1011::/48 then bgp_large_community.add((61302, 4, 21000));
        #     if proto = "BGP_Prefix_play" then bgp_large_community.add((61302, 4, 34000));
            #if proto = "BGP_Prefix_play" then bgp_large_community.add((61302, 2, 1));
            #if net ~ 2a0c:e640:101a::/48 then bgp_large_community.add((61302, 4, 24000));
            #if net ~ 2a0c:e640:101a::/48 then bgp_large_community.add((61302, 4, 21000));
            #if net ~ 2a0c:e640:101a::/48 then bgp_large_community.add((61302, 4, 27000));
	    #if net ~ 2a0c:e640:101a::/48 then bgp_large_community.add((61302, 2, 1));
            bgp_large_community.add((LOCAL_ASN, 6, NODE_ID));
            if proto = "BGP_Prefix" then bgp_large_community.add((LOCAL_ASN, 2, 1));
#        if my_opt_prefix() then bgp_path.prepend(LOCAL_ASN);
            if bgp_export_all() then accept;
            reject;
        };
    };
       ipv4 {
       table bgp_v4;
       next hop self;
       import filter {
            #if bgp_path ~ [= 61302 =] then bgp_path.delete(61302);
            if is_bogon_asn() then {
                #print "is bogon asn ", net, " for ASN ", bgp_path.last;
                reject;
        }
            if is_bogon_prefix() then {
                #print "is bogon prefix ", net, " for ASN ", bgp_path.last;
                reject;
            }
            # if bgp_path ~ [=  =] then {
            #     #bgp_path.prepend(LOCAL_ASN);
            #     if my_opt_prefix() then bgp_path.prepend(LOCAL_ASN); 
            # }
	     if bgp_large_community ~ [(LOCAL_ASN, 2, 100)] then preference = 115;
            accept;
        };
        export filter {
            if proto = "BGP_Prefix_v4" then bgp_large_community.add((LOCAL_ASN, 2, 1));
            if bgp_export_all() then accept;
            reject;
        };
    };
}


# template bgp tpl_ibgp_own {
#     # ibgp transfer table which cannot have downstream
#     local as LOCAL_ASN;
#     graceful restart;
#     rr client;
#     direct;
#    ipv6 {
#        table bgp_v6_own;
#        next hop self;
#        import filter {
#             #if bgp_path ~ [= 61302 =] then bgp_path.delete(61302);
#             if is_bogon_asn() then {
#                 print "is bogon asn", net, " for ASN ", bgp_path.last;
#                 reject;
#         }
#             if is_bogon_prefix() then {
#                 print "is bogon prefix", net, " for ASN ", bgp_path.last;
#                 reject;
#             }
#             # if bgp_path ~ [=  =] then {
#             #     #bgp_path.prepend(LOCAL_ASN);
#             #     if my_opt_prefix() then bgp_path.prepend(LOCAL_ASN); 
#             # }
#             accept;
#         };
#         export filter {
#             if proto = "BGP_Prefix_play" then bgp_large_community.add((61302, 4, 34000));
#             if proto = "BGP_Prefix_play" then bgp_large_community.add((61302, 2, 1));
#             if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 27000));
#             if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 24000));
#             if net ~ 2406:840:e249::/48 then bgp_large_community.add((61302, 4, 21000));
#             if proto = "BGP_Prefix" then bgp_large_community.add((61302, 2, 1));
#             if bgp_export_all() then accept;
#             reject;
#         };
#     };
# }



include "/etc/bird/peers/*.conf";
