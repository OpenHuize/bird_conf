function my_opt_prefix()
prefix set allowed_prefix;
int set allowed_prefix_origins;
{
    include "/etc/bird/filters/allowed_prefix.conf";
        case net.type {
        NET_IP4: return true;
        NET_IP6: if net ~ allowed_prefix then return true;
        else: print "net_is_not_from_the_as_set: unexpected net.type ", net.type, " ", net; return false;
    }
}

function is_bogon() {
    if is_bogon_asn() then return true;
    if is_bogon_prefix() then return true;
    if net_len_too_long() then return true;
    return false;
}

function is_own_net_prefix() {
    if bgp_large_community !~ [(LOCAL_ASN, 2, 1)] then return false;
    return true;
}

function export_igp_prefixes() {
    if proto = "iGP_Prefix" then return true;
    if proto = "iGP_Prefix_v4" then return true;
    if bgp_large_community !~ [(LOCAL_ASN, 2, 10)] then return false;
    return true;
}


function roa_invalid(){
    case net.type {
        NET_IP4: 
            if (roa_check(r4, net, bgp_path.last) = ROA_INVALID) then
    {
            print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
            return true;
    }
        NET_IP6:     
        if (roa_check(r6, net, bgp_path.last) = ROA_INVALID) then
    {
            print "Ignore RPKI invalid ", net, " for ASN ", bgp_path.last;
            return true;
    }
        else: print "net_len_too_long: unexpected net.type ", net.type, " ", net; return false;
    }
    return false;
}

function bgp_export()   
{
    # my_opt_prefix();
    if is_bogon() then return false;
    if bgp_large_community ~ [(LOCAL_ASN, 4, NODE_ID)] then return false;
    if is_local_prefix()  then return true;
    # if proto = "BGP_Prefix_play" then return true;
    if source != RTS_BGP then return false;
    if bgp_large_community !~ [(LOCAL_ASN, 2, 1)] then return false;
    return true;
}


function bgp_export_all() {
    if bgp_export() then return true;
    # if is_bogon_asn() then return false;
    # if is_bogon_prefix() then return false; 
    if source != RTS_BGP then return false;
    return true;
}

function bgp_export_downstream() {
    if is_bogon_asn() then return false;
    if is_bogon_prefix() then return false; 
    if source != RTS_BGP then return false;
    if bgp_large_community ~ [(LOCAL_ASN, 4, 31000)] then return false;
    if bgp_large_community !~ [(LOCAL_ASN, 2, 100)] then return false;
    return true;
}


function bgp_export_both() {
    if bgp_export() then return true;
    if bgp_export_downstream() then return true;    
    return false;
}

function prepend_self_pow(int prepend_pow){
    if prepend_pow = 1 then {
        bgp_path.prepend(LOCAL_ASN);
    }
    if prepend_pow = 2 then {
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
    }
    if prepend_pow = 4 then {
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
    }
    if prepend_pow = 8 then {
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
    }
}

function prepend_self(int prepend_num){
    if prepend_num = 1 then {
        prepend_self_pow(1);
    }
    if prepend_num = 2 then {
        prepend_self_pow(2);
    }
    if prepend_num = 3 then {
        prepend_self_pow(1);
        prepend_self_pow(2);
    }
    if prepend_num = 4 then {
        prepend_self_pow(4);
    }
    if prepend_num = 5 then {
        prepend_self_pow(1);
        prepend_self_pow(4);
    }
    if prepend_num = 6 then {
        prepend_self_pow(2);
        prepend_self_pow(4);
    }
    if prepend_num = 7 then {
        prepend_self_pow(1);
        prepend_self_pow(2);
        prepend_self_pow(4);
    }
    if prepend_num = 8 then {
        prepend_self_pow(8);
    }
}


function ibgp_export_community_action(){
        bgp_large_community.add((LOCAL_ASN, 6, NODE_ID));
        if is_local_prefix() then bgp_large_community.add((LOCAL_ASN, 2, 1));
        if is_local_prefix() then bgp_local_pref=400;  #Prevent routing loops in the local network

        if  (LOCAL_ASN, 7, 1) ~ bgp_large_community then {
        prepend_self(1);
        }
        if (LOCAL_ASN, 7, 2) ~ bgp_large_community then {
            prepend_self(2);
        }
        if (LOCAL_ASN, 7, 3) ~ bgp_large_community then {
            prepend_self(3);
        }
        if (LOCAL_ASN, 7, 4) ~ bgp_large_community then {
            prepend_self(4);
        }
        if (LOCAL_ASN, 7, 5) ~ bgp_large_community then {
            prepend_self(5);
        }
        if (LOCAL_ASN, 7, 6) ~ bgp_large_community then {
            prepend_self(6);
        }
        if (LOCAL_ASN, 7, 7) ~ bgp_large_community then {
            prepend_self(7);
        }
        if (LOCAL_ASN, 7, 8) ~ bgp_large_community then {
            prepend_self(8);
        }
        bgp_large_community.delete([(LOCAL_ASN, 7, *)]);
}

function ebgp_export_community_action(string peer_type; int peer_asn){

    if (LOCAL_ASN, 6000, peer_asn) ~ bgp_large_community then {
       reject;
    }
    if peer_type = "peer" then {
            if (rt, LOCAL_ASN, 6600) ~ bgp_ext_community then {
                reject;
            }
    }
    if peer_type = "ixrs" then {
            if (rt, LOCAL_ASN, 6601) ~ bgp_ext_community then {
                reject;
            }
    }
    # if peer_type = "ibgp" then {
    #     if is_local_prefix() then bgp_local_pref=400;
    #     if is_local_prefix() then bgp_large_community.add((LOCAL_ASN, 2, 1));
    # }
    if peer_type = "upstream" then {
            if  (rt, LOCAL_ASN, 6602) ~ bgp_ext_community then {
                reject;
            }
    }
    if   bgp_large_community ~[(LOCAL_ASN, 5, *)] then {
        if (LOCAL_ASN, 5, NODE_ID) !~ bgp_large_community then reject;
    }

    # For Huize node

    if   bgp_large_community ~[(61302, 5, *)] then {
        if (61302, 5, NODE_ID) !~ bgp_large_community then reject;
    }

    # For Huicast Node

    if   bgp_large_community ~[(60539, 5, *)] then {
        if (60539, 5, NODE_ID) !~ bgp_large_community then reject;
    }

    if  (LOCAL_ASN, 6001, peer_asn) ~ bgp_large_community then {
        prepend_self(1);
    }
    if (LOCAL_ASN, 6002, peer_asn) ~ bgp_large_community then {
        prepend_self(2);
    }
    if (LOCAL_ASN, 6003, peer_asn) ~ bgp_large_community then {
        prepend_self(3);

    }
    if (LOCAL_ASN, 6004, peer_asn) ~ bgp_large_community then {
        prepend_self(4);
    }
    if (LOCAL_ASN, 6005, peer_asn) ~ bgp_large_community then {
        prepend_self(5);
    }
    if  (LOCAL_ASN, 7001, NODE_ID) ~ bgp_large_community then {
        prepend_self(1);
    }
    if (LOCAL_ASN, 7002, NODE_ID) ~ bgp_large_community then {
        prepend_self(2);
    }
    if (LOCAL_ASN, 7003, NODE_ID) ~ bgp_large_community then {
        prepend_self(3);
    }
    if (LOCAL_ASN, 7004, NODE_ID) ~ bgp_large_community then {
        prepend_self(4);
    }
    if (LOCAL_ASN, 7005, NODE_ID) ~ bgp_large_community then {
        prepend_self(5);
    }
    if (LOCAL_ASN, 7006, NODE_ID) ~ bgp_large_community then {
        prepend_self(6);
    }
    if (LOCAL_ASN, 7007, NODE_ID) ~ bgp_large_community then {
        prepend_self(7);
    }
    if (LOCAL_ASN, 7008, NODE_ID) ~ bgp_large_community then {
        prepend_self(8);
    }
    if (rt, LOCAL_ASN, 6001) ~ bgp_ext_community then {
        prepend_self(1);
    } 
    if (rt, LOCAL_ASN, 6002) ~ bgp_ext_community then {
        prepend_self(2);
    } 
    if (rt, LOCAL_ASN, 6003) ~ bgp_ext_community then {
        prepend_self(3);
    } 
    if (rt, LOCAL_ASN, 6004) ~ bgp_ext_community  then {
        prepend_self(4);
    } 
    if (rt, LOCAL_ASN, 6005) ~ bgp_ext_community  then {
        prepend_self(5);
    } 
    return true;
}

function add_type(string peer_type) # Use when import
int neighbor_asn;
{
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="ibgp" || peer_type="grc") then {
        print "bgp_import: unknown peer_type:", peer_type;
        reject;
    }
    if bgp_path.len > 0 then{
        neighbor_asn = bgp_path.first;
    } else {
        neighbor_asn = LOCAL_ASN;
    }

    if peer_type = "upstream" then {
        bgp_local_pref=140;
        bgp_large_community.add((LOCAL_ASN, 100 ,NODE_ID));
    } else if peer_type = "ixrs" then {
        bgp_local_pref=180;
        bgp_large_community.add((LOCAL_ASN, 200 ,NODE_ID));
    } else if peer_type = "peer" then {
        bgp_local_pref=200;
        bgp_large_community.add((LOCAL_ASN, 300 ,NODE_ID));
    } else if peer_type = "downstream" then {
        bgp_local_pref=300;
        bgp_large_community.add((LOCAL_ASN, 400 ,NODE_ID));
        bgp_large_community.add((LOCAL_ASN, 2, 100));
    } else if peer_type = "ibgp" then {
        bgp_large_community.add((LOCAL_ASN, 6 ,NODE_ID));
    } else if peer_type = "grc" then {
        reject;
    }
}

function ebgp_import(int peer_asn; string peer_type; int prepend_num; bool allow_downstream){
    if is_bogon_asn() then {
            print "is bogon asn", net, " for ASN ", bgp_path.last;
            return false;
    }
    if is_bogon_prefix() then {
            print "is bogon prefix", net, " for ASN ", bgp_path.last;
            return false;
    }
    if roa_invalid() then return false;
    bgp_large_community.delete([(LOCAL_ASN, 1, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 2, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 3, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 6, *)]);
    if peer_type != "downstream" then bgp_large_community.delete([(LOCAL_ASN, 666, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 667, *)]);              
    bgp_large_community.delete([(LOCAL_ASN, 100, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 200, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 300, *)]);
    bgp_large_community.delete([(LOCAL_ASN, 400, *)]);
    prepend_self(prepend_num);
    add_type(peer_type);
    # net_whitelist(prefix_whitelist);
    # if 0 !~ asn_whitelist then {
    #     path_whitelist(asn_whitelist);
    # }
    if allow_downstream = true then bgp_large_community.add((LOCAL_ASN, 3, NODE_ID)); else bgp_large_community.add((LOCAL_ASN, 1, NODE_ID));
    additional_import_action();
    return true;
}

function ebgp_export(int peer_asn; string peer_type; int prepend_num ; bool allow_downstream) {
    ebgp_export_community_action("peer_type", peer_asn);
    prepend_self(prepend_num);
    additional_export_action();
    if bgp_export() then return true;
    if allow_downstream = true then if bgp_export_downstream() then return true;
    if peer_type = "downstream" then if bgp_large_community ~ [(LOCAL_ASN, 3, *)] then return true;

    return false;
};

function ibgp_import(int bgp_med_ping; int extra_bgp_med; int prepend_num){
            add_type("ibgp");
            # if is_bogon_asn() then {
            #     print "is bogon asn", net, " for ASN ", bgp_path.last;
            #     return false;
            # }
            # if is_bogon_prefix() then {
            #     print "is bogon prefix", net, " for ASN ", bgp_path.last;
            #     return false;
            # }

            if (LOCAL_ASN, 47, NODE_ID) ~ bgp_large_community then {
            return false;
            }

            if bgp_large_community ~ [(LOCAL_ASN, 2, 100)] then preference = 115;
            additional_import_action();

            # 如果 MED 值已经存在，则将其以原值为基础增加
            if defined (bgp_med) then {
                bgp_med = bgp_med + bgp_med_ping + extra_bgp_med;
            }
            # 否则，设置 MED 值为新值
            else {
                bgp_med = bgp_med_ping + extra_bgp_med;
            }
            prepend_self(prepend_num);

             return true;
}

function ibgp_export(int prepend_num) {
        additional_export_action();
        ibgp_export_community_action();
        prepend_self(prepend_num);
        if export_igp_prefixes() then bgp_large_community.add((LOCAL_ASN, 2, 10));
        if export_igp_prefixes() then return true;
        if bgp_export_all() then return true;
        return false;
};
